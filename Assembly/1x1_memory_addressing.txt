- Source and destination operands
    - When an instruction requires two operands
        - First is destination
        - Second is source.
- Immediate Addressing
    - Gets its name from the fact that the item being addressed is data built 
    right into the machine instruction.
    - CPU does not have to go anywhere to find the data.
    - Immediate data is always right inside the instruction being fetched and
    executed.
    - Examples
        ADD EAX, 3
        MOV AH, 00
        MOV EAX, 0ABCDFFFFH
        MOV AX, 302
        MOV AX, -40
        MOV EAX, 'WXYZ'
- Register Addressing
    - Data stored in register is called Register Data
    - Accessind register data directely is an addressing mode called 
    Register Addressing.
        - It is done by simply nameing the register you wnat to access
            mov ebp, esi
            sub ebx, ebx
            xor eax, eax
- Register indirect addressing mode
    mov al, [bp]
                   +---------+
                 .>|---------|---> al
                 | |---------|
          +----+ | |---------|
          | BP |-+-|---------|
          +----+ | |---------|
    +----+       | |---------|
    | SS |-------->|---------|
    +----+         +---------+
- Register relative addressing mode
    mov al, [bp+d]
                   +---------+
                 .>|---------|---> al
                 | |---------|
                 | |---------|
               d + |---------|
          +----+ | |---------|
          | BP |-+-|---------|
          +----+ | |---------|
    +----+       | |---------|
    | SS |-------->|---------|
    +----+         +---------+
- Base indexed mode
    mov al, [bp+si]
                   +---------+
                 .>|---------|---> al
          +----+ | |---------|
          | SI |-+-|---------|
          +----+ | |---------|
          +----+ | |---------|
          | BP |-+-|---------|
          +----+ | |---------|
    +----+       | |---------|
    | SS |-------->|---------|
    +----+         +---------+
- Base relative indexed mode
    mov al, [bp+si+d]
                   +---------+
                 .>|---------|---> al
                 | |---------|
                 | |---------|
               d + |---------|
          +----+ | |---------|
          | SI |-+-|---------|
          +----+ | |---------|
          +----+ | |---------|
          | BP |-+-|---------|
          +----+ | |---------|
    +----+       | |---------|
    | SS |-------->|---------|
    +----+         +---------+
- At the current evaluation of x86 hardware, 2 registers may be added 
together to form effective address but not 3 or more.
- Confusing data and its address
    - Consider the following
        EatMsg: db "Eat at Joe's"
        . . .
        mov ecx, EatMsg
        - In a high-level language, whatever data is stored in EatMsg
        it will be transfered into ECX.
        - But thats not the case in Assembly, the mov instruction
        actually copies the address of EatMsg, not whats stored in EatMsg.
        - In Assembly variables represent address not data
        - so how do you get the data?
            mov edx, [EatMsg] ; 'E' 'a' 't' and ' ' will be moved to edx 
            - What the above instruction does is go out to the location
            in memory specified by the address represented by EatMsg, pull 
            the first 32 bits' worth of data from that address load that
            data into EDX starting with least significant byte in EDX
- Size of memory data
    - Consider the following
        EatMsg: db "Eat at Joe's"
        - What if you only want to work with a single character?
            mov al, [EatMsg] ; only E will be moved to al
            - since al is one byte (8 bits), by using al you can bring
            the first byte of EatMsg
            - If you want to refer the lower 2 bytes (16 bits) use AX 
                mov ax, [EatMsg] ; E and a will be moved to ax
    - Size issue gets tricky when you want to trandsfer data in register to a
    memory. 
        - NASM does not remember the size of variables as high-level language
        - Knows where EatMsg starts in memory and thats it
        - You have to tell nasm how many bytes of data to move.
        - This is done by size specifiers
            move [EatMsg], byte 'G'
            - In here you are telling nasm that you only want to move single 
            byte out to EatMsg
            - Other size specifiers
                - WORD
                - DWORD
        
            

